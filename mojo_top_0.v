/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  wire [3-1:0] M_ctr_value;
  counter_2 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam IDLE_state = 5'd0;
  localparam ADDITION1_state = 5'd1;
  localparam ADDITION2_state = 5'd2;
  localparam ERROR_state = 5'd3;
  localparam SUBSTRACTION_state = 5'd4;
  localparam MULTIPLICATION_state = 5'd5;
  localparam DIVISION_state = 5'd6;
  localparam AND_state = 5'd7;
  localparam OR_state = 5'd8;
  localparam XOR_state = 5'd9;
  localparam CMPEQ_state = 5'd10;
  localparam CMPLE_state = 5'd11;
  localparam CMPLT_state = 5'd12;
  localparam SHL_state = 5'd13;
  localparam SHR_state = 5'd14;
  localparam SRA_state = 5'd15;
  localparam PASS_state = 5'd16;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  reg [5:0] alufn;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] alu;
  
  localparam X = 5'h1d;
  
  wire [7-1:0] M_sevenseg3_segs;
  reg [4-1:0] M_sevenseg3_char;
  seven_seg_3 sevenseg3 (
    .char(M_sevenseg3_char),
    .segs(M_sevenseg3_segs)
  );
  
  wire [7-1:0] M_sevenseg2_segs;
  reg [4-1:0] M_sevenseg2_char;
  seven_seg_3 sevenseg2 (
    .char(M_sevenseg2_char),
    .segs(M_sevenseg2_segs)
  );
  
  wire [7-1:0] M_sevenseg1_segs;
  reg [4-1:0] M_sevenseg1_char;
  seven_seg_3 sevenseg1 (
    .char(M_sevenseg1_char),
    .segs(M_sevenseg1_segs)
  );
  
  wire [7-1:0] M_sevenseg0_segs;
  reg [4-1:0] M_sevenseg0_char;
  seven_seg_3 sevenseg0 (
    .char(M_sevenseg0_char),
    .segs(M_sevenseg0_segs)
  );
  
  wire [8-1:0] M_alu1_alu;
  reg [1-1:0] M_alu1_clk;
  reg [1-1:0] M_alu1_rst;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_7 alu1 (
    .clk(M_alu1_clk),
    .rst(M_alu1_rst),
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu1_clk = clk;
    M_alu1_rst = rst;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    alufn = io_dip[16+0+5-:6];
    M_alu1_alufn = alufn;
    M_alu1_a = a;
    M_alu1_b = b;
    alu = M_alu1_alu;
    io_led[16+7-:8] = alu;
    io_led[8+7-:8] = io_dip[8+7-:8];
    io_led[0+7-:8] = io_dip[0+7-:8];
    M_sevenseg0_char = 4'h6;
    M_sevenseg1_char = 4'h6;
    M_sevenseg2_char = 4'h6;
    M_sevenseg3_char = 4'h6;
    
    case (M_state_q)
      IDLE_state: begin
        M_counter_d = 1'h0;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = ADDITION1_state;
        end
      end
      ADDITION1_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h05;
        M_alu1_b = 8'h05;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = 8'h05;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h3;
        M_sevenseg1_char = 4'h6;
        M_sevenseg0_char = 4'h6;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h0a) begin
          M_counter_d = 1'h0;
          M_state_d = ADDITION2_state;
        end
      end
      ADDITION2_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h05;
        M_alu1_b = 8'h05;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = 8'h05;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h3;
        M_sevenseg1_char = 4'h6;
        M_sevenseg0_char = 4'h6;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h0c) begin
          M_counter_d = 1'h0;
          M_state_d = ERROR_state;
        end
      end
      ERROR_state: begin
        M_sevenseg3_char = 4'h7;
        M_sevenseg2_char = 4'hb;
        M_sevenseg1_char = 4'hb;
        M_sevenseg0_char = 4'h3;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SUBSTRACTION_state;
        end
      end
      SUBSTRACTION_state: begin
        M_alu1_alufn = 6'h01;
        M_alu1_a = 8'h64;
        M_alu1_b = 8'h32;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h32;
        io_led[0+7-:8] = 8'h64;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h9;
        M_sevenseg1_char = 4'hc;
        M_sevenseg0_char = 4'h4;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h32) begin
          M_counter_d = 1'h0;
          M_state_d = MULTIPLICATION_state;
        end
      end
      MULTIPLICATION_state: begin
        M_alu1_alufn = 6'h02;
        M_alu1_a = 8'h04;
        M_alu1_b = 8'h08;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h08;
        io_led[0+7-:8] = 8'h04;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'hf;
        M_sevenseg1_char = 4'hf;
        M_sevenseg0_char = 4'hd;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h20) begin
          M_counter_d = 1'h0;
          M_state_d = DIVISION_state;
        end
      end
      DIVISION_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 8'h0a;
        M_alu1_b = 8'h02;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = 8'h0a;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h6;
        M_sevenseg1_char = 4'h1;
        M_sevenseg0_char = 4'hc;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h05) begin
          M_counter_d = 1'h0;
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alu1_alufn = 6'h18;
        M_alu1_a = 8'hb1;
        M_alu1_b = 8'he9;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'he9;
        io_led[0+7-:8] = 8'hb1;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h3;
        M_sevenseg1_char = 4'he;
        M_sevenseg0_char = 4'h6;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'ha1) begin
          M_counter_d = 1'h0;
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu1_alufn = 6'h1e;
        M_alu1_a = 8'hac;
        M_alu1_b = 8'h16;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h16;
        io_led[0+7-:8] = 8'hac;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'hf;
        M_sevenseg1_char = 4'h6;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hbe) begin
          M_counter_d = 1'h0;
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 8'hf0;
        M_alu1_b = 8'h33;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h33;
        io_led[0+7-:8] = 8'hf0;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'hd;
        M_sevenseg1_char = 4'h6;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hc3) begin
          M_counter_d = 1'h0;
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'h96;
        M_alu1_b = 8'h96;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h96;
        io_led[0+7-:8] = 8'h96;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h5;
        M_sevenseg1_char = 4'h7;
        M_sevenseg0_char = 4'h6;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        M_alu1_alufn = 6'h35;
        M_alu1_a = 8'h11;
        M_alu1_b = 8'h03;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h03;
        io_led[0+7-:8] = 8'h11;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h5;
        M_sevenseg1_char = 4'ha;
        M_sevenseg0_char = 4'h2;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 8'h01;
        M_alu1_b = 8'h0d;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h0d;
        io_led[0+7-:8] = 8'h01;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h5;
        M_sevenseg1_char = 4'ha;
        M_sevenseg0_char = 4'h7;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu1_alufn = 6'h20;
        M_alu1_a = 8'h0f;
        M_alu1_b = 8'h04;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h04;
        io_led[0+7-:8] = 8'h0f;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h9;
        M_sevenseg1_char = 4'hd;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hf0) begin
          M_counter_d = 1'h0;
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu1_alufn = 6'h21;
        M_alu1_a = 8'hb0;
        M_alu1_b = 8'h02;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = 8'hb0;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h9;
        M_sevenseg1_char = 4'hd;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h2c) begin
          M_counter_d = 1'h0;
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 8'hb0;
        M_alu1_b = 8'h02;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = 8'hb0;
        M_sevenseg3_char = 4'hf;
        M_sevenseg2_char = 4'h9;
        M_sevenseg1_char = 4'hb;
        M_sevenseg0_char = 4'h3;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hec) begin
          M_counter_d = 1'h0;
          M_state_d = PASS_state;
        end
      end
      PASS_state: begin
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = IDLE_state;
        end
      end
    endcase
    
    case (M_ctr_value)
      1'h0: begin
        io_seg = ~M_sevenseg0_segs;
        io_sel = 4'he;
      end
      1'h1: begin
        io_seg = ~M_sevenseg1_segs;
        io_sel = 4'hd;
      end
      2'h2: begin
        io_seg = ~M_sevenseg2_segs;
        io_sel = 4'hb;
      end
      2'h3: begin
        io_seg = ~M_sevenseg3_segs;
        io_sel = 4'h7;
      end
      default: begin
        io_seg = ~M_sevenseg0_segs;
        io_sel = 4'he;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
